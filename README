The "libehht" C library specifies a basic object oriented hash-table.

The keys need not be strings, any char pointer and length is fine.

The operations are _not_ thread-safe, and thus the caller is
responsible for locking if used in a multi-threaded environment.


Default Construction
--------------------

In the simple case, the defaults will usually be fine, e.g.:

	struct ehht_s *table;

	table = ehht_new();
	if (!table) {
		exit(EXIT_FAILURE);
	}

If needed, custom hashing functions, as well as memory allocation
functions can be provided. See "Custom Contruction" below.


Destruction
-----------

To free the table, the "ehht_free" function is provided.

	ehht_free(table);


Put
----

The "put" method takes a pointer to the table struct, a pointer to
key, the length of the key in bytes, a pointer to a value, and a a
pointer to an optional errcode. The key is copied by the hashtable,
thus the caller is welcome to use a mutable buffer when put-ing
objects into the table. The return value is whatever value was
previously pointed to by the key, or NULL. The *errcode int pointer
will only be touched if memory allocation fails.


	void *previous_val;
	char buf[80];
	int err;

	strcpy(buf, "foo");
	err = 0;
	previous_val = table->put(table, buf, strlen(buf), "bar", &err);

	strcpy(buf, "whiz");
	previous_val = table->put(table, buf, strlen(buf), "bang", &err);

	if (err) {
		fprintf(stderr, "A call to put failed?\n");
		exit(EXIT_FAILURE);
	}


Get
----

The "get" method takes a pointer to the table, a pointer to the key,
the length of the key in bytes, and returns a pointer to the value.


	val = table->get(table, buf, strlen(buf));


Remove
------

The "remove" method returns the previous value or NULL, and frees
the table's private copy of the key.

	previous_val = table->remove(table, buf, strlen(buf));


Clear
-----

The "clear" method removes all entries in the table;

	table->clear(table);


Has Key
-------

The "has_key" method returns 0 if the table has the key or non-zero
if the key is present in the table.

	if (table->has_key(table, buf, strlen(buf))) {
		printf("already have key '%s'\n", buf);
	}



Size
----

The "size" method returns the number of keys in the table.

	size_t keys_used;

	keys_used = table->size(table);


For Each
--------

The "for_each" method takes an iterator function pointer and a
context pointer and calls the function for each key-value pair in
the table, until the iterator function returns a non-zero value.

This is an example prototype for a function usable with "for_each":

	int add_lens(struct ehht_key_s each_key, void *each_val, void *context);

Calling "for_each" would be done as so:

	unsigned long total;

	total = 0;
	table->for_each(table, add_lens, &total);
	fprintf("total length: %lu\n", total);

This is an example implementation of "add_lens", which shows how
the key, value, and context may be used:

	int add_lens(struct ehht_key_s each_key, void *each_val, void *context)
	{
		int halt_iteration;
		unsigned long *i;
		const char *val;

		halt_iteration = 0;
		i = (unsigned long *)context;
		val = (const char *)each_val;

		if (each_key.str) {
			*i += each_key.len;
		}
		if (val) {
			*i += strlen(val);
		}

		return halt_iteration;
	}



External Iteration
------------------

If "for_each" is not desired, a struct of keys can be used for
user-controlled iteration. If the buffers of keys will be pointed to
after the struct ehht_keys_s is freed, then the caller may request that
the keys be new copies, rather than pointers to internal keys.

	size_t distribution_report(struct ehht_s *table,
				   size_t *sizes,
				   size_t sizes_len)
	{
		struct ehht_keys_s *keys;
		int copy_keys;
		size_t i, bucket;

		for (i = 0; i < sizes_len; ++i) {
			sizes[i] = 0;
		}

		copy_keys = 0;
		keys = table->keys(table, copy_keys);
		for (i = 0; i < keys->len; ++i) {
			bucket = ehht_bucket_for_key(table,
						     keys->keys[i].str,
						     keys->keys[i].len);
			++sizes[bucket];
		}
		table->free_keys(table, keys);

		return i;
	}


To String
---------

For debug convienence, a basic "to_string" method is provided. The
return value is the the number of characters written to buffer,
excluding the null byte terminator.

	char buf[BUF_LEN];
	size_t written;

	written = table->to_string(table, buf, BUF_LEN);
	printf("table: %s\n", buf);


Custom Construction
-------------------

Here is an example of constructing an ehht with custom allocation and
hashing functions:

	struct tracking_context_s {
		unsigned allocs;
		unsigned alloc_fails;
		unsigned frees;
		unsigned null_frees;
		unsigned alloc_bytes;
		unsigned free_bytes;
		unsigned peak_usage;
	};

	void *tracking_malloc(size_t size, void *context)
	{
		struct tracking_context_s *ctx;
		unsigned char *tracking_buffer;
		void *ptr;
		size_t used;

		ptr = NULL;
		ctx = (struct tracking_context_s *)context;
		tracking_buffer = malloc(sizeof(size_t) + size);
		if (!tracking_buffer) {
			++ctx->alloc_fails;
			return NULL;
		}

		ptr = (void *)(tracking_buffer + sizeof(size_t));
		memcpy(tracking_buffer, &size, sizeof(size_t));
		++ctx->allocs;
		ctx->alloc_bytes += size;
		used = ctx->alloc_bytes - ctx->free_bytes;
		if (used > ctx->peak_usage) {
			ctx->peak_usage = used;
		}
		return ptr;
	}

	void tracking_free(void *ptr, void *context)
	{
		struct tracking_context_s *ctx;
		unsigned char *tracking_buffer;
		size_t size;

		ctx = (struct tracking_context_s *)context;
		if (ptr == NULL) {
			++ctx->null_frees;
			return;
		}
		tracking_buffer = ((unsigned char *)ptr) - sizeof(size_t);
		memcpy(&size, tracking_buffer, sizeof(size_t));
		ctx->free_bytes += size;
		++ctx->frees;
		free(tracking_buffer);
	}

	#define DJB2_HASH_SEED 5381
	unsigned int djb2_hash(const char *data, size_t len)
	{
		unsigned int hash;
		size_t i;

		hash = DJB2_HASH_SEED;
		for (i = 0; i < len; ++i) {
			hash = ((hash << 5) + hash) + ((unsigned int)data[i]);
		}

		return hash;
	}

	struct ehht_s *new_tracking_table(size_t buckets,
					  struct tracking_context_s *ctx,
					  int clear_context)
	{
		ehht_log_error_func log_func = NULL; /* fprintf */
		void *log_ctx = stderr;

		if (clear_context) {
			ctx->allocs = 0;
			ctx->alloc_bytes = 0;
			ctx->alloc_fails = 0;
			ctx->frees = 0;
			ctx->free_bytes = 0;
			ctx->null_frees = 0;
			ctx->peak_usage = 0;
		}
		return ehht_new_custom(buckets, djb2_hash, tracking_malloc,
				      tracking_free, ctx, log_func, log_ctx);
	}

If the number of buckets is 0 at construction, a default is chosen.


To see how to use jumphash, you can look in the "demos" directory:
 * https://github.com/ericherman/libehht/blob/master/demos/demo-ehht.c
 * https://github.com/ericherman/libjumphash
 * http://www.cse.yorku.ca/~oz/hash.html


Number of Buckets
-----------------

The "ehht_buckets_size" method returns the current number of buckets
allocated inside the table.

	size_t buckets;

	buckets = ehht_buckets_size(table);


Resize
------
The 'put' operation will auto-resize the hashtable if it encounters a
collision if load factor is reached.  The default load-factor is 2/3.

Auto-resizing can be disabled with:
                ehht_buckets_auto_resize_load_factor(table, 0.0)

The "ehht_buckets_resize" function allows the caller to change the
number of buckets used by the table. If allocation fails, the bucket
size remains unchanged.

	size_t buckets, target_buckets;

	target_buckets = 2048;
	buckets = ehht_buckets_resize(table, target_buckets);
	if (buckets != target_buckets) {
		fprintf(stderr, "resize failed\n");
	}


"Flyweight" hashtables
----------------------
It is possible to configure the hashtable to _not_ copy keys, but
rather retain only pointers to the keys. Obviously these keys should
be immutable for the lifetime of the hash, and should not be free()d
until no longer in use by the hashtable. To enable a "flyweight"
version of the hashtable, after construction set this property:

	struct ehht_s *table = ehht_new();
	ehht_trust_keys_immutable(table, 1);



Dependencies
------------
The "make", "make check", and "make install" targets have no
external dependencies.  The files "src/ehht.c" and "src/ehht.h" can
be added directly into your project. When using them in an embedded
firmware, I have typically pasted the code directly into my firmware
file and deleted functions like "to_string" and "for_each". Since
LibC bloat can be quite pronounced in firmware, it can usually be
avoided with function pointers and #define Ehht_memset, Ehht_memcpy.

The "make demo" target depends upon "simple_stats"
  * https://github.com/ericherman/simple_stats


Test Coverage
-------------
autoreconf -iv &&
 ./configure --enable-debug &&
 make &&
 make check &&
 lcov --capture --directory src --output-file coverage.info &&
 genhtml coverage.info --output-directory coverage_html &&
 ${BROWSER} ./coverage_html/src/ehht.c.gcov.html


Building on linux from a release tar
--------
tar -xf /path/to/libehht-*.tar.gz
cd libehht-*
./configure && make && make check
sudo make install
sudo ldconfig


Packaging
---------
autoreconf -iv &&
 ./configure &&
 make &&
 make distcheck &&
 echo "Success."


License
-------
GNU Lesser General Public License (LGPL), version 3 or later.
See COPYING, COPYING.LESSER for details.
