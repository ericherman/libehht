2020-02-02  Eric Herman <eric@freesa.org>
	API-breaking change! ehht_new_custom(...) now takes an optional
	argument for error printing function and context. The default
	is "fprintf(stderr, errmsg)". The test tests/test_out_of_memory.c
	in combination with the helpers in tests/test-ehht.h contains a
	hands-on example of capturing the error messages to a char buf[].

	The test_out_of_memory tests ensure that all 11 places in ehht.c
	which allocate memory are exercised as if malloc returned NULL.
	These tests ensure that in each case there are not leaks, and
	the system stays in "sane" and reasonable state.

	To ease debugging, all variables are initialized to 0 or NULL.
	Of course, these are typically optimized away with "-O2".

	To support the embedded/standalone/no-libc case, 'Ehht_memset'
	and 'Ehht_memcopy' are defined and used through-out. Naturally,
	they are #defined to memset and memcpy but if ehht is added to
	embedded code, and these are #defined against alternative
	versions, this can be leveraged to avoid adding LibC bloat in
	firmware.

	* src/ehht.h: allow custom error printing, or fprintf(stderr,...)
	* src/ehht.c: allow custom error printing, zero vars, Ehht_memset
	* Makefile.am: include test_out_of_memory in "make valgrind"
	* tests/test-ehht.h: swap stderr with a log buffer
	* tests/test_out_of_memory.c: test all 11 OOM conditions
	* tests/test_ehht_resize.c: capture err output, no stderr spam
	* tests/test_ehht_clear.c: ehht_new_custom
	* tests/test_ehht_collision_resize.c: ehht_new_custom
	* tests/test_ehht_foreach_element.c: ehht_new_custom
	* tests/test_ehht_keys.c: ehht_new_custom
	* tests/test_ehht_new.c: ehht_new_custom
	* tests/test_ehht_put_get_remove.c:ehht_new_custom
	* demos/demo-ehht.c: ehht_new_custom

2020-01-30  Eric Herman <eric@freesa.org>
	Big API-breaking change! the table->put() command now has an
	extra argument: an int pointer for setting to non-zero if put
	fails due to a memory allocation issue.

	* src/ehht.h: add (int *err) to ehht->put() argument list
	* src/ehht.c: put() set *err to 1 on memory allocation failure
	* demos/demo-ehht-as-array.c: pass in &err to put
	* demos/demo-ehht.c: &err
	* tests/ehht-report.h: &err
	* tests/test_ehht_clear.c: &err
	* tests/test_ehht_collision_resize.c: &err
	* tests/test_ehht_foreach_element.c: &err
	* tests/test_ehht_keys.c: &err
	* tests/test_ehht_put_get_remove.c: &err
	* tests/test_ehht_resize.c: &err
	* tests/test_out_of_memory.c: &err
	* tests/test-ehht.h: sketch-in idea for allocation failure testing


2020-01-29  Eric Herman <eric@freesa.org>

	Include directions for test code coverage

	* Makefile.am: make it easy to add --coverage to FLAGS
	* README: coverage instructions
	* src/ehht.c: improve local names, minor robustness, coverage
	* tests/test_ehht_new.c: use the *default* constructor
	* tests/test_ehht_resize.c: test resize way too big
	* .gitignore: coverage files


2020-01-19  Eric Herman <eric@freesa.org>

	Even more API-breaking changes!
	But, getting close to stable, nearly ready for release.

	Bucket-related friend functions now all start with the
	"ehht_buckets" or "ehht_bucket" prefix:

	ehht_buckets_size
	ehht_buckets_resize
	ehht_buckets_auto_resize_load_factor
	ehht_bucket_for_key

	* src/ehht.h: change bucket-function name declarations
	* src/ehht.c: change bucket-function name definitions
	* README: update function names, clarify docs a bit
	* demos/demo-ehht.c: use new names
	* tests/test_ehht_collision_resize.c: use new names
	* tests/test_ehht_new.c: use new names
	* tests/test_ehht_resize.c: use new names


2020-01-16  Eric Herman <eric@freesa.org>

	More API-breaking changes!

	The default constructor is now no-arg.
	The custom constructor is now ehht_new_custom

	The hashtable no long has member functions num_buckets, resize,
	or bucket_for_key, rather ehht_num_buckets, ehht_resize, and
	ehht_bucket_for_key are available for testing and the rare
	situations where they may be desired. As these are specific to
	an implementation, they are no longer part of the hashtable API.

	The 'put' operation will now auto-resize the hashtable if it
	encounters a collision if load factor is reached. Auto-resizing
	can be disabled with:
		ehht_set_collision_resize_load_factor(table, 0.0)

	Also SPDX-License-Identifier all the things.

	* src/ehht.h: constructor adjustment, move impl specific funcs
	* src/ehht.c: auto-resize on collision
	* README: constructor, auto-resize
	* demos/demo-ehht-as-array.c: constructor
	* demos/demo-ehht.c: constructor, set_collision_resize_load_factor 0.0
	* demos/leveldb_util_hash.c: Add BSD-3-clause License info
	* configure.ac: version bump
	* tests/test_ehht_collision_resize.c: new test!
	* tests/*.c: adjust constructor
	* Makefile.am: +test_ehht_collision_resize
	* .gitignore: +test_ehht_collision_resize


2019-01-13  Eric Herman <eric@freesa.org>

	API-breaking change: no longer pass "size" to ehht_free_func:

	-void (*ehht_free_func) (void *ptr, size_t size, void *context);
	+void (*ehht_free_func) (void *ptr, void *context);

	* src/ehht.h:
	* src/ehht.c: no longer pass "size" to free funcs
	* tests/test-ehht.h: update to use new API, move size code inside
	* tests/test_ehht_clear.c: update the initialization
	* tests/test_out_of_memory.c: update the initialization
	* README: update the example
	* configure.ac: version bump


2019-01-13  Eric Herman <eric@freesa.org>

	Rather than build with-or-without jumphash, simply
	demonstrate how the caller can use jumphash as part
	of a function pointer.

	* src/ehht.c: remove jumphash
	* src/jumphash.c: moved to demos/jumphash.c
	* demos/demo-ehht.c: demonstrate using jumphash, djb2_hash
	* demos/djb2_hash.c: simple re-impl
	* src/jumphash.h: deleted
	* misc/pre-tidy.patch: removed jumphash.h
	* Makefile.am: update for demos


2018-11-15  Eric Herman <eric@freesa.org>

	Separating the headers is not needed yet as there is only one
	implementation. Should a better/different implmentation require
	the change, we can re-do it.

	* src/ehht.h: merged in src/ehht-interface.h
	* src/ehht-interface.h: merged into src/ehht.h
	* src/ehht-report.h: moved to tests/ dir
	* tests/ehht-report.h: moved from src/ dir
	* tests/test-ehht.h: reflect move
	* demos/demo-ehht.c: reflect move
	* Makefile.am: fixup for above changes
	* configure.ac: version bump [1.1.1-dev]
	* misc/pre-tidy.patch: respin

2018-11-09  Eric Herman <eric@freesa.org>

	* src/ehht-interface.h: add method bucket_for_key
	* src/ehht.c: use jumphash for bucket_for_key #if EHHT_USE_JUMPHASH
	* src/jumphash.h: copy from https://github.com/ericherman/libjumphash
	* src/jumphash.c: copy from https://github.com/ericherman/libjumphash
	* src/ehht-report.h: use bucket_for_key
	* configure.ac: version bump from 1.0.1-dev -> 1.1.0-dev
	* Makefile.am: include jumphash files
	* misc/pre-tidy.patch: respin


2016-06-18  Eric Herman <eric@freesa.org>

	* Makefile.am: include COPYING.GPL
	* README: reference misc/
	* COPYING.GPL3: renamed COPYING.GPL3
	* misc/lgpl-3.0.txt renamed COPYING
	* COPYING: replace boilerplate with just lgpl-3.0.txt


2016-06-18  Eric Herman <eric@freesa.org>

	* COPYING: boilerplate LGPLv3+
	* README: reference misc/
	* Makefile.am: include misc/
	* COPYING.GPL3: renamed misc/gpl-3.0.txt
	* COPYING.LGPL3: renamed misc/lgpl-3.0.txt


2016-05-24  Eric Herman <eric@freesa.org>

	* Makefile.am: support split of tests
	* tests/test-ehht.c: split into individual test programs; remove
	* tests/test-ehht.h: extract from test-ehht.c
	* tests/test_ehht_clear.c: same
	* tests/test_ehht_foreach_element.c: same
	* tests/test_ehht_keys.c: same
	* tests/test_ehht_new.c: same
	* tests/test_ehht_put_get_remove.c: same
	* tests/test_ehht_resize.c: same
	* tests/test_out_of_memory.c: same
	* .gitignore: support new tests, tidy


2016-05-22  Eric Herman <eric@freesa.org>

	* tests/test-ehht.c: avoid exit values that are out-of-range

2016-05-21  Eric Herman <eric@freesa.org>

	demos working

2016-05-16  Eric Herman <eric@freesa.org>

	* Initial Release: v1.0.0

2016-05-16  Eric Herman <eric@freesa.org>

	* ChangeLog: Freshly created ChangeLog.
